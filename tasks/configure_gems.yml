---

#####=== configure ===#####

- block:
    - name: setup | determine ruby gems directory
      command: ls "{{ ansible_user_dir }}"/.gem/ruby
      register: ruby_version

    - name: bash/zsh | configure | pathmunge shell function
      blockinfile:
        dest: "{{ shell_profile }}"
        create: yes
        backup: no
        state: present
        insertbefore: BOF
        marker: "#####=== {mark} Ansible managed pathmunge ===#####"
        # FIXME: "{{ item }}" is not expanding in block for blockinfile
        block: |
          #!/usr/bin/env {{ ansible_user_shell_name }}

          pathmunge () {
            case ":${PATH}:" in
              *:"$1":*)
                ;;
              *)
                if [ "$2" = "after" ] ; then
                  PATH=$PATH:$1
                else
                  PATH=$1:$PATH
                fi
            esac
          }

          manpathmunge () {
            case ":${MANPATH}:" in
              *:"$1":*)
                ;;
              *)
                if [ "$2" = "after" ] ; then
                  MANPATH=$MANPATH:$1
                else
                  MANPATH=$1:$MANPATH
                fi
            esac
          }

    - name: bash/zsh | configure | ruby gems PATH
      blockinfile:
        dest: "{{ shell_profile }}"
        state: "{{ configuration_state }}"
        create: yes
        backup: no
        marker: "{{ ruby_marker }}"
        block: |
          pathmunge {{ ansible_user_dir}}/.gem/ruby/{{ ruby_version.stdout }}/bin
          export PATH=$PATH
  tags:
    - bootstrap
    - configure
    - update

- name: fish | configure | ruby gems PATH
  command: fish -c "set -Ux fish_user_paths {{ ansible_user_dir }}/.gem/ruby/{{ ruby_version.stdout }}/bin $fish_user_paths"
  when: ansible_user_shell | match(".*fish")
  tags:
    - bootstrap
    - configure
    - update
